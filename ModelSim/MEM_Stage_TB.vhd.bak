
`timescale 1ns / 1ps

module MEM_Stage_tb();

    // Inputs
    reg clk;
    reg rst;
    reg [31:0] EX_MEM_ALUResult;
    reg [31:0] EX_MEM_ReadData2;
    reg [4:0] EX_MEM_WriteReg;
    reg EX_MEM_MemRead;
    reg EX_MEM_MemWrite;
    reg EX_MEM_MemToReg;
    reg EX_MEM_RegWrite;

    // Outputs
    wire [31:0] MEM_WB_ALUResult;
    wire [31:0] MEM_WB_ReadData;
    wire [4:0] MEM_WB_WriteReg;
    wire MEM_WB_MemToReg;
    wire MEM_WB_RegWrite;

    // Instantiate the Unit Under Test (UUT)
    MEM_Stage uut (
        .clk(clk),
        .rst(rst),
        .EX_MEM_ALUResult(EX_MEM_ALUResult),
        .EX_MEM_ReadData2(EX_MEM_ReadData2),
        .EX_MEM_WriteReg(EX_MEM_WriteReg),
        .EX_MEM_MemRead(EX_MEM_MemRead),
        .EX_MEM_MemWrite(EX_MEM_MemWrite),
        .EX_MEM_MemToReg(EX_MEM_MemToReg),
        .EX_MEM_RegWrite(EX_MEM_RegWrite),
        .MEM_WB_ALUResult(MEM_WB_ALUResult),
        .MEM_WB_ReadData(MEM_WB_ReadData),
        .MEM_WB_WriteReg(MEM_WB_WriteReg),
        .MEM_WB_MemToReg(MEM_WB_MemToReg),
        .MEM_WB_RegWrite(MEM_WB_RegWrite)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Clock period = 10ns
    end

    // Test sequence
    initial begin
        // Initialize inputs
        rst = 1;
        EX_MEM_ALUResult = 0;
        EX_MEM_ReadData2 = 0;
        EX_MEM_WriteReg = 0;
        EX_MEM_MemRead = 0;
        EX_MEM_MemWrite = 0;
        EX_MEM_MemToReg = 0;
        EX_MEM_RegWrite = 0;

        // Reset deassertion
        #15 rst = 0;

        // Test case 1: Load Word (LW) simulation
        #10;
        EX_MEM_ALUResult = 32'h00000010; // Address to read from
        EX_MEM_MemRead = 1;
        EX_MEM_MemWrite = 0;
        EX_MEM_ReadData2 = 0; // Not used for read
        EX_MEM_WriteReg = 5'd1; // Write back to register 1
        EX_MEM_MemToReg = 1;
        EX_MEM_RegWrite = 1;

        #20;
        // Test case 2: Store Word (SW) simulation
        EX_MEM_ALUResult = 32'h00000020; // Address to write to
        EX_MEM_MemRead = 0;
        EX_MEM_MemWrite = 1;
        EX_MEM_ReadData2 = 32'hDEADBEEF; // Data to write
        EX_MEM_WriteReg = 5'd0; // No write back
        EX_MEM_MemToReg = 0;
        EX_MEM_RegWrite = 0;

        #20;
        // Test case 3: No memory operation
        EX_MEM_ALUResult = 32'h00000030;
        EX_MEM_MemRead = 0;
        EX_MEM_MemWrite = 0;
        EX_MEM_ReadData2 = 0;
        EX_MEM_WriteReg = 5'd2;
        EX_MEM_MemToReg = 0;
        EX_MEM_RegWrite = 1;

        #20;
        $stop; // End simulation
    end

endmodule
